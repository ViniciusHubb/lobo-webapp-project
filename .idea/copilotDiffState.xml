<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/usuarios-service/src/main/java/com/lobobombeiros/usuariosservice/infrastructure/security/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/usuarios-service/src/main/java/com/lobobombeiros/usuariosservice/infrastructure/security/SecurityConfig.java" />
              <option name="originalContent" value="package com.lobobombeiros.usuariosservice.infrastructure.security;&#10;&#10;import com.lobobombeiros.usuariosservice.application.service.CustomUserDetailsService;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.http.HttpMethod;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.Customizer;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;&#10;    private static final String USUARIOS_PATH = &quot;/usuarios/**&quot;;&#10;    private static final String ROLE_ADMIN = &quot;ADMIN&quot;;&#10;&#10;    @Autowired&#10;    private JwtAuthenticationFilter jwtAuthenticationFilter;&#10;&#10;    @Autowired&#10;    private CustomUserDetailsService customUserDetailsService;&#10;&#10;    @Bean&#10;    public DaoAuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();&#10;        authProvider.setUserDetailsService(customUserDetailsService);&#10;        authProvider.setPasswordEncoder(passwordEncoder());&#10;        return authProvider;&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {&#10;        return authenticationConfiguration.getAuthenticationManager();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .csrf(csrf -&gt; csrf.disable())&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&quot;/auth/**&quot;, &quot;/swagger-ui/**&quot;, &quot;/v3/api-docs/**&quot;).permitAll()&#10;                        .requestMatchers(&quot;/usuarios/internal/**&quot;).permitAll()&#10;                        .requestMatchers(HttpMethod.GET, USUARIOS_PATH).hasRole(ROLE_ADMIN)&#10;                        .requestMatchers(HttpMethod.PUT, USUARIOS_PATH).hasRole(ROLE_ADMIN)&#10;                        .requestMatchers(HttpMethod.DELETE, USUARIOS_PATH).hasRole(ROLE_ADMIN)&#10;                        .requestMatchers(HttpMethod.POST, &quot;/usuarios&quot;).hasRole(ROLE_ADMIN)&#10;                        .requestMatchers(HttpMethod.POST, &quot;/usuarios/solicitar-redefinicao-senha&quot;).permitAll()&#10;                        .requestMatchers(HttpMethod.POST, &quot;/usuarios/redefinir-senha&quot;).permitAll()&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;                .authenticationProvider(authenticationProvider())&#10;                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        // Define o BCrypt como o algoritmo para criptografar senhas&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.lobobombeiros.usuariosservice.infrastructure.security;&#10;&#10;import com.lobobombeiros.usuariosservice.application.service.CustomUserDetailsService;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.http.HttpMethod;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;&#10;import org.springframework.security.config.Customizer;&#10;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;&#10;    private final JwtAuthenticationFilter jwtAuthenticationFilter;&#10;    private final CustomUserDetailsService customUserDetailsService;&#10;&#10;    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter, CustomUserDetailsService customUserDetailsService) {&#10;        this.jwtAuthenticationFilter = jwtAuthenticationFilter;&#10;        this.customUserDetailsService = customUserDetailsService;&#10;    }&#10;&#10;    @Bean&#10;    public DaoAuthenticationProvider authenticationProvider() {&#10;        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();&#10;        authProvider.setUserDetailsService(customUserDetailsService);&#10;        authProvider.setPasswordEncoder(passwordEncoder());&#10;        return authProvider;&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {&#10;        return authenticationConfiguration.getAuthenticationManager();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;                .csrf(AbstractHttpConfigurer::disable)&#10;                .authorizeHttpRequests(auth -&gt; auth&#10;                        .requestMatchers(&quot;/auth/**&quot;, &quot;/swagger-ui/**&quot;, &quot;/v3/api-docs/**&quot;).permitAll()&#10;                        .requestMatchers(&quot;/usuarios/internal/**&quot;).permitAll()&#10;                        .requestMatchers(HttpMethod.POST, &quot;/usuarios/solicitar-redefinicao-senha&quot;).permitAll()&#10;                        .requestMatchers(HttpMethod.POST, &quot;/usuarios/redefinir-senha&quot;).permitAll()&#10;                        .anyRequest().authenticated()&#10;                )&#10;                .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;                .authenticationProvider(authenticationProvider())&#10;                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);&#10;&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>